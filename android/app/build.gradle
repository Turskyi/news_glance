plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
    id 'com.google.firebase.appdistribution'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '0.0.1'
}

def keyProperties = new Properties()
def keyPropertiesFile = rootProject.file('key.properties')
if (keyPropertiesFile.exists()) {
    keyPropertiesFile.withReader('UTF-8') { reader -> keyProperties.load(reader)
    }
}

def SIGNING_KEY_DEBUG_PATH = keyProperties.getProperty('SIGNING_KEY_DEBUG_PATH')
def SIGNING_KEY_DEBUG_PASSWORD = keyProperties.getProperty('SIGNING_KEY_DEBUG_PASSWORD')
def SIGNING_KEY_DEBUG_KEY = keyProperties.getProperty('SIGNING_KEY_DEBUG_KEY')
def SIGNING_KEY_DEBUG_KEY_PASSWORD = keyProperties.getProperty('SIGNING_KEY_DEBUG_KEY_PASSWORD')
def SIGNING_KEY_RELEASE_PATH = keyProperties.getProperty('SIGNING_KEY_RELEASE_PATH')
def SIGNING_KEY_RELEASE_PASSWORD = keyProperties.getProperty('SIGNING_KEY_RELEASE_PASSWORD')
def SIGNING_KEY_RELEASE_KEY = keyProperties.getProperty('SIGNING_KEY_RELEASE_KEY')
def SIGNING_KEY_RELEASE_KEY_PASSWORD = keyProperties.getProperty('SIGNING_KEY_RELEASE_KEY_PASSWORD')

android {
    namespace rootProject.application_id
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId rootProject.application_id
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }
    signingConfigs {
        production {
            // FCI_BUILD_ID is exported by Codemagic
            if (System.getenv()["FCI_BUILD_ID"] != null) {
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                storeFile file(SIGNING_KEY_RELEASE_PATH)
                storePassword SIGNING_KEY_RELEASE_PASSWORD
                keyAlias SIGNING_KEY_RELEASE_KEY
                keyPassword SIGNING_KEY_RELEASE_KEY_PASSWORD
            }
        }
        dev {
            // FCI_BUILD_ID is exported by Codemagic
            if (System.getenv()["FCI_BUILD_ID"] != null) {
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                storeFile file(SIGNING_KEY_DEBUG_PATH)
                storePassword SIGNING_KEY_DEBUG_PASSWORD
                keyAlias SIGNING_KEY_DEBUG_KEY
                keyPassword SIGNING_KEY_DEBUG_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.production
        }
        debug {
            signingConfig signingConfigs.dev
        }
    }
    buildFeatures {
        viewBinding true
        buildConfig = true
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.google.firebase:firebase-analytics:21.5.1'
    implementation 'com.google.firebase:firebase-crashlytics:18.6.2'
    implementation 'com.google.firebase:firebase-perf:20.5.2'
    implementation 'com.google.firebase:firebase-messaging:23.4.1'
    implementation 'com.android.support:multidex:1.0.3'
}
